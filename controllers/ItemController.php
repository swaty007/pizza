<?php

namespace app\controllers;

use app\models\OrderItems;
use Yii;
use app\models\Item;
use app\models\ItemSearch;
use app\models\Order;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;

/**
 * ItemController implements the CRUD actions for Item model.
 */
class ItemController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }


    public function beforeAction($action)
    {
        $session = Yii::$app->session;
        $session->open();
//        if ($session->has('language'))
//        {
//            $language =  $session->get('language');
//            \Yii::$app->language = $language;
//        }

        $session->close();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $searchModel = new ItemSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionStatus()
    {

        $orders = Order::find()->where(['<>','order_status','completed'])->andWhere(['<>','order_status','canceled'])->asArray()->all();

        foreach ($orders as $k=>$item)
        {
            $orders[$k]['items'] = OrderItems::find()->where(['order_id'=>$item['id']])->asArray()->all();
        }

        $items = Item::takeItems();

        return $this->render('status', [
            'orders' => $orders,
            'items' => $items
        ]);
    }
    public function actionChangeStatus ()
    {
        if (Yii::$app->request->isAjax)
        {
            Yii::$app->response->format = 'json';
            $status = Yii::$app->request->post('status');
            $order_id = Yii::$app->request->post('order_id');
            $order = Order::find()->where(['id'=>$order_id])->one();
            $order->order_status = $status;

            if ($order->save()){
                return ['status' => true];
            } else {
                return ['status' => false];
            }
        }
    }
    public function actionArchive()
    {

        $orders = Order::find()->where(['order_status'=>'completed'])->orWhere(['order_status'=>'canceled'])->asArray()->all();

        foreach ($orders as $k=>$item)
        {
            $orders[$k]['items'] = OrderItems::find()->where(['order_id'=>$item['id']])->asArray()->all();
        }

        $items = Item::takeItems();

        return $this->render('status', [
            'orders' => $orders,
            'items' => $items
        ]);
    }

    public function actionView($id,$flash=null)
    {
        if($flash != null)
        {
            Yii::$app->session->setFlash('PostChanged');
        }
        return $this->render('view', [
            'model' => $this->findModel($id),
            'model_child' => $this->findModelChildren($id)
        ]);
    }

    public function actionCreate()
    {
        $model = new Item();

        $this->handlePostSave($model);

        return $this->render('create', [
            'model' => $model,
        ]);

    }

    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        $this->handlePostSave($model);

        return $this->render('update', [
            'model' => $model,
            'model_child' => $this->findModelChildren($id)
        ]);

    }
    public function actionAddChildren ()
    {
        if (Yii::$app->request->isAjax)
        {
            Yii::$app->response->format = 'json';
            $price = Yii::$app->request->post('price');
            $size = Yii::$app->request->post('size');
            $weight = Yii::$app->request->post('weight');
            $id = Yii::$app->request->post('id');

            $i = Item::find()->where(['id'=>$id])->one();
            $item = new Item;
            $item->name = $i->name;
            $item->price = $price;
            $item->weight = $weight;
            $item->size = $size;
            $item->parent_id = $id;
            $item->type = 'children';
            $item->save();
            return ['status' => true, 'item' => $item];
        }
    }
    public function actionUpdateChildren ()
    {
        if (Yii::$app->request->isAjax)
        {
            Yii::$app->response->format = 'json';
            $price = Yii::$app->request->post('price');
            $size = Yii::$app->request->post('size');
            $weight = Yii::$app->request->post('weight');
            $id = Yii::$app->request->post('id');
            $parent_id = Yii::$app->request->post('parent_id');

            $i = Item::find()->where(['id'=>$parent_id])->one();
            $item = Item::find()->where(['id' => $id])->one();
            $item->name = $i->name;
            $item->price = $price;
            $item->weight = $weight;
            $item->size = $size;
            $item->parent_id = $parent_id;
            $item->type = 'children';
            $item->save();
            return ['status' => true, 'item' => $item];
        }
    }
    public function actionDeleteChildren ()
    {
        if (Yii::$app->request->isAjax)
        {
            Yii::$app->response->format = 'json';
            $id = Yii::$app->request->post('id');

            $model = $this->findModel($id);
            $model->delete();
            return ['status' => true];
        }
    }

    public function actionDelete($id)
    {
        $model = $this->findModel($id);
        if(!is_null($model->img))
        {
            unlink(Yii::getAlias('@webroot') . $model->img);
        }
        $model->delete();
        Yii::$app->session->setFlash('PostDeleted');
        return $this->redirect(['index']);

    }

    protected function findModel($id)
    {
        if (($model = Item::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    protected function findModelChildren($id)
    {
        if ( ($model_child = Item::find()->where(['parent_id' => $id])) !== null) {
            return $model_child->all();
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    protected function handlePostSave(Item $model)
    {
        if ($model->load(Yii::$app->request->post())) {
            $model->upload = UploadedFile::getInstance($model, 'upload');
            if ($model->validate()) {
                if ($model->upload) {
                    if(!is_null($model->img))
                    {
                        unlink(Yii::getAlias('@webroot') . $model->img);
                    }
                    $filePath = '/images/items/' . time(). $model->upload->baseName . '.' . $model->upload->extension;
                    if ($model->upload->saveAs(Yii::getAlias('@webroot') . $filePath)) {
                        $model->img = $filePath;
                    }
                }

                if ($model->save(false)) {
                    return $this->redirect(['view', 'id' => $model->id, 'flash'=>'s']);
                }
            }
        }
    }
}
